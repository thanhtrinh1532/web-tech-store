import { useState } from "react"
import { useCart } from "../context/CartContext"
import "./PaymentForm.css"

const PaymentForm = ({ onOrderComplete }) => {
  const { cart, clearCart, getFinalTotal } = useCart()
  const [formData, setFormData] = useState({
    // Th√¥ng tin giao h√†ng
    fullName: "",
    email: "",
    phone: "",
    address: "",
    city: "",
    district: "",
    ward: "",
    // Ph∆∞∆°ng th·ª©c thanh to√°n
    paymentMethod: "cod",
    // Ghi ch√∫
    notes: "",
  })

  const [errors, setErrors] = useState({})
  const [isSubmitting, setIsSubmitting] = useState(false)

  const cities = [
    { value: "hanoi", label: "H√† N·ªôi" },
    { value: "hcm", label: "TP. H·ªì Ch√≠ Minh" },
    { value: "danang", label: "ƒê√† N·∫µng" },
    { value: "haiphong", label: "H·∫£i Ph√≤ng" },
    { value: "cantho", label: "C·∫ßn Th∆°" },
  ]

  const districts = {
    hanoi: [
      { value: "ba-dinh", label: "Ba ƒê√¨nh" },
      { value: "hoan-kiem", label: "Ho√†n Ki·∫øm" },
      { value: "dong-da", label: "ƒê·ªëng ƒêa" },
    ],
    hcm: [
      { value: "quan-1", label: "Qu·∫≠n 1" },
      { value: "quan-2", label: "Qu·∫≠n 2" },
      { value: "quan-3", label: "Qu·∫≠n 3" },
    ],
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }))
    }
  }

  const validateForm = () => {
    const newErrors = {}

    if (!formData.fullName.trim()) {
      newErrors.fullName = "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n"
    }

    if (!formData.email.trim()) {
      newErrors.email = "Vui l√≤ng nh·∫≠p email"
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá"
    }

    if (!formData.phone.trim()) {
      newErrors.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
    } else if (!/^[0-9]{10,11}$/.test(formData.phone.replace(/\s/g, ""))) {
      newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"
    }

    if (!formData.address.trim()) {
      newErrors.address = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ"
    }

    if (!formData.city) {
      newErrors.city = "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000))

      const orderData = {
        ...formData,
        items: cart.items,
        total: getFinalTotal(),
        orderDate: new Date().toISOString(),
        orderId: `ORD${Date.now()}`,
      }

      clearCart()
      onOrderComplete(orderData)
    } catch (error) {
      console.error("Order submission failed:", error)
      alert("C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.")
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="payment-form">
      <form onSubmit={handleSubmit}>
        <div className="form-section">
          <div className="section-header">
            <h3>Th√¥ng tin giao h√†ng</h3>
            <span className="required-note">* Th√¥ng tin b·∫Øt bu·ªôc</span>
          </div>

          <div className="form-grid">
            <div className="form-group full-width">
              <label htmlFor="fullName">H·ªç v√† t√™n *</label>
              <input
                type="text"
                id="fullName"
                name="fullName"
                value={formData.fullName}
                onChange={handleInputChange}
                className={errors.fullName ? "error" : ""}
                placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
              />
              {errors.fullName && <span className="error-message">{errors.fullName}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="email">Email *</label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                className={errors.email ? "error" : ""}
                placeholder="example@email.com"
              />
              {errors.email && <span className="error-message">{errors.email}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i *</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                className={errors.phone ? "error" : ""}
                placeholder="0123456789"
              />
              {errors.phone && <span className="error-message">{errors.phone}</span>}
            </div>

            <div className="form-group full-width">
              <label htmlFor="address">ƒê·ªãa ch·ªâ *</label>
              <input
                type="text"
                id="address"
                name="address"
                value={formData.address}
                onChange={handleInputChange}
                className={errors.address ? "error" : ""}
                placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£"
              />
              {errors.address && <span className="error-message">{errors.address}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="city">T·ªânh/Th√†nh ph·ªë *</label>
              <select
                id="city"
                name="city"
                value={formData.city}
                onChange={handleInputChange}
                className={errors.city ? "error" : ""}
              >
                <option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>
                {cities.map((city) => (
                  <option key={city.value} value={city.value}>
                    {city.label}
                  </option>
                ))}
              </select>
              {errors.city && <span className="error-message">{errors.city}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="district">Qu·∫≠n/Huy·ªán</label>
              <select
                id="district"
                name="district"
                value={formData.district}
                onChange={handleInputChange}
                disabled={!formData.city}
              >
                <option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>
                {formData.city &&
                  districts[formData.city]?.map((district) => (
                    <option key={district.value} value={district.value}>
                      {district.label}
                    </option>
                  ))}
              </select>
            </div>
          </div>
        </div>

        <div className="form-section">
          <div className="section-header">
            <h3>Ph∆∞∆°ng th·ª©c thanh to√°n</h3>
          </div>

          <div className="payment-methods">
            <label className={`payment-method ${formData.paymentMethod === "cod" ? "selected" : ""}`}>
              <input
                type="radio"
                name="paymentMethod"
                value="cod"
                checked={formData.paymentMethod === "cod"}
                onChange={handleInputChange}
              />
              <div className="payment-content">
                <div className="payment-icon">üíµ</div>
                <div className="payment-info">
                  <span className="payment-title">Thanh to√°n khi nh·∫≠n h√†ng (COD)</span>
                  <span className="payment-desc">Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng</span>
                </div>
              </div>
            </label>

            <label className={`payment-method ${formData.paymentMethod === "bank" ? "selected" : ""}`}>
              <input
                type="radio"
                name="paymentMethod"
                value="bank"
                checked={formData.paymentMethod === "bank"}
                onChange={handleInputChange}
              />
              <div className="payment-content">
                <div className="payment-icon">üè¶</div>
                <div className="payment-info">
                  <span className="payment-title">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</span>
                  <span className="payment-desc">Chuy·ªÉn kho·∫£n tr·ª±c ti·∫øp v√†o t√†i kho·∫£n</span>
                </div>
              </div>
            </label>

            <label className={`payment-method ${formData.paymentMethod === "momo" ? "selected" : ""}`}>
              <input
                type="radio"
                name="paymentMethod"
                value="momo"
                checked={formData.paymentMethod === "momo"}
                onChange={handleInputChange}
              />
              <div className="payment-content">
                <div className="payment-icon">üì±</div>
                <div className="payment-info">
                  <span className="payment-title">V√≠ MoMo</span>
                  <span className="payment-desc">Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ MoMo</span>
                </div>
              </div>
            </label>
          </div>
        </div>

        <div className="form-section">
          <div className="section-header">
            <h3>Ghi ch√∫ ƒë∆°n h√†ng</h3>
          </div>

          <div className="form-group">
            <textarea
              id="notes"
              name="notes"
              value={formData.notes}
              onChange={handleInputChange}
              placeholder="Ghi ch√∫ v·ªÅ ƒë∆°n h√†ng, v√≠ d·ª•: th·ªùi gian hay ch·ªâ d·∫´n ƒë·ªãa ƒëi·ªÉm giao h√†ng chi ti·∫øt h∆°n..."
              rows="4"
            />
          </div>
        </div>

        <button type="submit" className="submit-btn" disabled={isSubmitting}>
          {isSubmitting ? (
            <>
              <div className="btn-spinner"></div>
              ƒêang x·ª≠ l√Ω...
            </>
          ) : (
            <>
              ƒê·∫∑t h√†ng ngay
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                <path
                  d="M5 12h14m-7-7l7 7-7 7"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </>
          )}
        </button>
      </form>
    </div>
  )
}

export default PaymentForm